ID: 2018A7PS0261P
DSA Lab7
----------------------------------------------------------------------------------------------------------------------------------------------
To RUN
make compMain -> compiles and generates exe_main
make compTest -> compiles and generates exe_test
make runMain -> runs ./exe_test <size>....<size> and ./exe_main <size> <size>_Summary_out //<size> is a file with size number of records ranging between 10 to 10^5

Manually: ./exe_main <inputfile> <outputfile> -> to generate summary //eg: ./exe_main 100 100_Summary_out
	  ./exe_test <inputfile> -> to generate sorted files as output //eg: ./exe_test 10 100 1000 (you can give more than one input)
----------------------------------------------------------------------------------------------------------------------------------------------
Header Files
- emp_rec.h : struct for reading employee details from input file
	      typedef as (rec)

- stack.h : struct for explicit stack (typedef as Stack)
	    Stack * init(Stack *,int)
	    void * push(Stack *,int)
	    int pop(Stack *)
	    int peek(Stack *)

- exer1.h : includes required header files
	    strcut for storing sorting time(typedef as tt)
	    void quick_sort(rec [],int,int);
	    int partition(rec [],int,int);
            void insertion_sort(rec [],int);
            tt sort(rec [],int,int);
            void print_list(rec [],int);
	    tt testRun(rec [],int );
	    int estimateCutoff(rec [],int,int ,int );
	    rec * read_file(char *);
	    void write_file(char *,rec [],int,int,tt);
	    void reset(rec org_arr[],rec new_arr[],int size);
----------------------------------------------------------------------------------------------------------------------------------------------
.c FILES
- stack.c : contains the code for all the stack.h related functions

- insertion_sort.c : contains code for -> void insertion_sort(rec [],int);
 
- quick_sort.c : contains code for -> void quick_sort(rec [],int,int);
		 contains code for -> int partition(rec [],int,int);
 
- sort.c : contains code for -> tt sort(rec [],int,int);
	   runs both quick sort and insertion sort on a given array
	   measures the time and stores it in sturct called tt

- extras.c : contains code for -> void reset(rec org_arr[],rec new_arr[],int size);
   	     contains code for -> tt testRun(rec [],int );
	     contains code for -> int estimateCutoff(rec [],int,int ,int );
	     contains code for -> void print_list(rec [],int);

- test.c : runs both sorts on the same input data and produces sorted output with time as two files <size>_sorted_insertion or            <size>_sorted_quick
	   NEEDS: stack.c quick_sort.c sort.c insertion_sort.c extras.c for compilation. 
	   exe_test default executable 

- main.c : runs both sorts on the same input data and produces summary output with time and cutoff value as <size>_Summary_out
	   NEEDS: stack.c quick_sort.c sort.c insertion_sort.c extras.c for compilation. 
	   exe_main default executable 
----------------------------------------------------------------------------------------------------------------------------------------------
INPUT FILES
<size>
eg: 10,100,1000 etc.
----------------------------------------------------------------------------------------------------------------------------------------------
OUTPUT FILES
<size>_sorted_insertion -> Contains sorted(ascending wrt empID) data generated by insetion sort. Also contains the time taken.
<size>_sorted_quick -> Contains sorted(ascending wrt empID) data generated by quick sort. Also contains the time taken.
<size>_Summary_out -> Contains file size, cutoff value, time taken by insertion sort to sort entire list, time taken by quick sort to sort list with cutoff value as non affected sublist constraint.
